<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd" >
<mapper namespace="com.debug.springboot.model.mapper.primary.ArticleMapper" >
  <resultMap id="BaseResultMap" type="com.debug.springboot.model.entity.primary.Article" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
  </resultMap>
  <sql id="Base_Column_List" >
    id, title, user_id
  </sql>
  <select id="selectByPrimaryKey" resultMap="BaseResultMap" parameterType="java.lang.Integer" >
    select 
    <include refid="Base_Column_List" />
    from article
    where id = #{id,jdbcType=INTEGER}
  </select>
  <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer" >
    delete from article
    where id = #{id,jdbcType=INTEGER}
  </delete>
  <insert id="insert" parameterType="com.debug.springboot.model.entity.primary.Article" >
    insert into article (id, title, user_id
      )
    values (#{id,jdbcType=INTEGER}, #{title,jdbcType=VARCHAR}, #{userId,jdbcType=INTEGER}
      )
  </insert>
  <insert id="insertSelective" keyProperty="id" useGeneratedKeys="true" parameterType="com.debug.springboot.model.entity.primary.Article" >
    insert into article
    <trim prefix="(" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        id,
      </if>
      <if test="title != null" >
        title,
      </if>
      <if test="userId != null" >
        user_id,
      </if>
    </trim>
    <trim prefix="values (" suffix=")" suffixOverrides="," >
      <if test="id != null" >
        #{id,jdbcType=INTEGER},
      </if>
      <if test="title != null" >
        #{title,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        #{userId,jdbcType=INTEGER},
      </if>
    </trim>
  </insert>
  <update id="updateByPrimaryKeySelective" parameterType="com.debug.springboot.model.entity.primary.Article" >
    update article
    <set >
      <if test="title != null" >
        title = #{title,jdbcType=VARCHAR},
      </if>
      <if test="userId != null" >
        user_id = #{userId,jdbcType=INTEGER},
      </if>
    </set>
    where id = #{id,jdbcType=INTEGER}
  </update>
  <update id="updateByPrimaryKey" parameterType="com.debug.springboot.model.entity.primary.Article" >
    update article
    set title = #{title,jdbcType=VARCHAR},
      user_id = #{userId,jdbcType=INTEGER}
    where id = #{id,jdbcType=INTEGER}
  </update>


  <delete id="deleteBatch">
    DELETE FROM article
    WHERE id IN (${ids})
  </delete>

  <select id="pageSelect" resultType="com.debug.springboot.model.entity.primary.Article" >
    SELECT <include refid="Base_Column_List"/>
    FROM article
    <where>
      <if test="search!=null and search!=''">
        title LIKE CONCAT('%',#{search},'%')
      </if>
    </where>
  </select>




  <resultMap id="BaseResultInfoMap" type="com.debug.springboot.model.entity.primary.Article" >
    <id column="id" property="id" jdbcType="INTEGER" />
    <result column="title" property="title" jdbcType="VARCHAR" />
    <result column="user_id" property="userId" jdbcType="INTEGER" />
    <result column="userName" property="userName" jdbcType="INTEGER" />

    <collection property="comments" ofType="com.debug.springboot.model.entity.primary.CommentInfo">
      <result column="cId" property="cId" jdbcType="VARCHAR" />
      <result column="comment" property="comment" jdbcType="VARCHAR" />
      <result column="cUserId" property="cUserId" jdbcType="INTEGER" />
    </collection>
  </resultMap>

  <select id="list" resultMap="BaseResultInfoMap">
    SELECT
        a.*,
        c.name AS userName,

        b.id AS cId,
        b.content AS comment,
        b.user_id AS cUserId
    FROM
        article AS a
    LEFT JOIN `comment` AS b ON b.article_id=a.id
    LEFT JOIN user AS c ON c.id = a.user_id
    ORDER BY a.id
  </select>


  <select id="selectById" resultType="com.debug.springboot.model.entity.primary.Article">
    SELECT
      a.id,
      a.title,
      a.user_id,
      b.name AS userName
    FROM article AS a LEFT JOIN user AS b ON b.id = a.user_id
    WHERE a.id = #{id}
  </select>



</mapper>


























